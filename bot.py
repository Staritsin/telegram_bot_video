import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import yt_dlp
import tempfile
import os
import re
import subprocess
import time
import openai
import threading
import logging
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_ID = int(os.getenv("OWNER_ID", "2101512357"))
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "@staritsin_school")
CHANNEL_URL = "https://t.me/staritsin_school"
ROCKET_URL = "https://t.me/rocketcontentbot"

bot = telebot.TeleBot(API_TOKEN)
openai.api_key = OPENAI_API_KEY

logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

PLATFORM_PATTERNS = {
    'instagram': r'(https?://)?(www\.)?(instagram\.com|instagr\.am)/',
    'tiktok': r'(https?://)?(www\.)?tiktok\.com/',
    'pinterest': r'(https?://)?(www\.)?pinterest\.',
}

user_links = {}
user_posts = {}
user_state = {}
user_message_count = {}

def check_subscription(user_id):
    if user_id == OWNER_ID:
        return True
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def build_subscribe_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_URL))
    markup.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
    return markup

def subscription_guard(func):
    def wrapper(message_or_call, *args, **kwargs):
        user_id = (
            message_or_call.from_user.id
            if hasattr(message_or_call, "from_user")
            else message_or_call.message.chat.id
        )
        if user_id == OWNER_ID:
            return func(message_or_call, *args, **kwargs)
        if not check_subscription(user_id):
            chat_id = (
                message_or_call.message.chat.id
                if hasattr(message_or_call, "message")
                else message_or_call.chat.id
            )
            bot.send_message(
                chat_id,
                "‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @staritsin_school",
                reply_markup=build_subscribe_keyboard()
            )
            return
        return func(message_or_call, *args, **kwargs)
    return wrapper

def detect_platform(url):
    for platform, pattern in PLATFORM_PATTERNS.items():
        if re.search(pattern, url):
            logging.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
            return platform
    logging.info("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
    return None

def build_rocket_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ï—â—ë –±–æ–ª—å—à–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç—É—Ç", url=ROCKET_URL))
    return markup

def cleanup_files(files):
    for f in files:
        try:
            os.remove(f)
        except Exception:
            pass

def send_processing_status(chat_id, post_title, status, task_id):
    msg = bot.send_message(
        chat_id,
        f"<b>–ö–æ–Ω—Ç–µ–Ω—Ç –º–∞—à–∏–Ω–∞</b>\n{post_title}\n\n"
        f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ Reels</b>\n"
        f"üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> {task_id}\n"
        f"‚úçÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {status}",
        parse_mode="HTML"
    )
    return msg.message_id

def update_processing_status(chat_id, message_id, post_title, status, task_id, done=False):
    prefix = "‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>" if done else "‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ Reels</b>"
    bot.edit_message_text(
        f"<b>–ö–æ–Ω—Ç–µ–Ω—Ç –º–∞—à–∏–Ω–∞</b>\n{post_title}\n\n"
        f"{prefix}\n"
        f"üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> {task_id}\n"
        f"‚úçÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {status}",
        chat_id,
        message_id,
        parse_mode="HTML"
    )

def ensure_mp4(filename):
    new_filename = os.path.splitext(filename)[0] + '.mp4'
    ffmpeg_cmd = [
        'ffmpeg', '-y', '-i', filename,
        '-vf', (
            'scale=w=720:h=1280:force_original_aspect_ratio=decrease,'
            'pad=720:1280:(ow-iw)/2:(oh-ih)/2:color=black'
        ),
        '-c:v', 'libx264', '-preset', 'fast', '-crf', '23',
        '-c:a', 'aac', '-b:a', '128k',
        '-movflags', '+faststart',
        new_filename
    ]
    subprocess.run(ffmpeg_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return new_filename

def after_video_sent(chat_id):
    user_links.pop(chat_id, None)
    user_posts.pop(chat_id, None)
    user_state[chat_id] = 'WAITING_FOR_LINK'

def increment_message_count(chat_id):
    user_message_count[chat_id] = user_message_count.get(chat_id, 0) + 1

def process_download(chat_id, url):
    try:
        task_id = int(time.time())
        post_title = "–í–∞—à–∞ –∑–∞–¥–∞—á–∞"
        status_msg_id = send_processing_status(chat_id, post_title, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...", task_id)

        with tempfile.TemporaryDirectory() as tmpdir:
            platform = detect_platform(url)
            media_files = []
            post_text = ""

            if platform == 'instagram':
                media_files, post_text = download_instagram_content(url, tmpdir)
                user_posts[chat_id] = post_text
            elif platform == 'pinterest':
                file = download_pinterest_video(url, os.path.join(tmpdir, 'video.mp4'))
                if file and os.path.exists(file):
                    media_files.append(file)
            elif platform == 'tiktok':
                media_files, post_text = download_tiktok_video(url, tmpdir)
                user_posts[chat_id] = post_text

            update_processing_status(chat_id, status_msg_id, post_title, "–ì–æ—Ç–æ–≤–æ", task_id, done=True)

            if len(media_files) > 1:
                for f in media_files:
                    with open(f, 'rb') as file_obj:
                        bot.send_video(chat_id, file_obj, supports_streaming=True)
                        time.sleep(1)
            elif len(media_files) == 1:
                with open(media_files[0], 'rb') as f:
                    bot.send_video(chat_id, f, supports_streaming=True)
            else:
                raise Exception("No media files found")

            if user_posts.get(chat_id):
                bot.send_message(chat_id, f"{user_posts[chat_id]}")

            bot.send_message(
                chat_id,
                "‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!",
                reply_markup=build_rocket_keyboard()
            )
            cleanup_files(media_files)
            after_video_sent(chat_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        post_text = user_posts.get(chat_id, "")
        bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –í–æ—Ç —Å—Å—ã–ª–∫–∞: {url}\n{post_text}")
        after_video_sent(chat_id)

def download_tiktok_video(url, tmpdir):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ TikTok –ø–æ —Å—Å—ã–ª–∫–µ url.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (media_files, post_text).
    """
    import yt_dlp
    import os
    import subprocess

    ydl_opts = {
        'outtmpl': os.path.join(tmpdir, '%(title)s.%(ext)s'),
        'quiet': True,
        'merge_output_format': 'mp4',
        'format': (
            'bestvideo[ext=mp4][height<=1280][width<=720][vcodec!*=none]+'
            'bestaudio[ext=m4a]/best[ext=mp4][height<=1280][width<=720][vcodec!*=none]/best'
        ),
        'postprocessors': [],
        'http_headers': {'User-Agent': 'Mozilla/5.0'},
        'allow_unplayable_formats': False,
        'prefer_ffmpeg': True,
    }

    media_files = []
    post_text = ""
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            post_text = info.get('description') or info.get('title') or ""
            filename = ydl.prepare_filename(info)
            new_filename = os.path.splitext(filename)[0] + '.mp4'
            subprocess.run([
                'ffmpeg', '-y', '-i', filename,
                '-vf', 'scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:(ow-iw)/2:(oh-ih)/2:color=black',
                '-c:v', 'libx264', '-preset', 'fast', '-crf', '23',
                '-c:a', 'aac', '-b:a', '128k',
                '-movflags', '+faststart',
                new_filename
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            if os.path.exists(new_filename) and os.path.getsize(new_filename) > 0:
                media_files.append(new_filename)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok: {e}")
    return media_files, post_text

def download_instagram_content(url, tmpdir):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç Reels, –ø–æ—Å—Ç –∏–ª–∏ –∫–∞—Ä—É—Å–µ–ª—å –∏–∑ Instagram –ø–æ —Å—Å—ã–ª–∫–µ url.
    –¢—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –≤—ã –±—ã–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã –≤ Instagram –≤ Chrome –Ω–∞ —ç—Ç–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ!
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (media_files, post_text).
    """
    import yt_dlp
    import os
    import subprocess

    ydl_opts = {
    'outtmpl': os.path.join(tmpdir, '%(title)s.%(ext)s'),
    'quiet': True,
    'merge_output_format': 'mp4',
    'format': (
        'bestvideo[ext=mp4][height<=1280][width<=720][vcodec!*=none]+'
        'bestaudio[ext=m4a]/best[ext=mp4][height<=1280][width<=720][vcodec!*=none]/best'
    ),
    'postprocessors': [],
    'http_headers': {'User-Agent': 'Mozilla/5.0'},
    'allow_unplayable_formats': False,
    'prefer_ffmpeg': True,
    'cookiefile': 'instagram_cookies.txt',  # <-- –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
}

    media_files = []
    post_text = ""
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            post_text = info.get('description') or info.get('title') or ""
            # –ö–∞—Ä—É—Å–µ–ª—å (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ)
            if 'entries' in info and info['entries']:
                for entry in info['entries']:
                    filename = ydl.prepare_filename(entry)
                    new_filename = os.path.splitext(filename)[0] + '.mp4'
                    subprocess.run([
                        'ffmpeg', '-y', '-i', filename,
                        '-vf', 'scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:(ow-iw)/2:(oh-ih)/2:color=black',
                        '-c:v', 'libx264', '-preset', 'fast', '-crf', '23',
                        '-c:a', 'aac', '-b:a', '128k',
                        '-movflags', '+faststart',
                        new_filename
                    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    if os.path.exists(new_filename) and os.path.getsize(new_filename) > 0:
                        media_files.append(new_filename)
            else:
                filename = ydl.prepare_filename(info)
                new_filename = os.path.splitext(filename)[0] + '.mp4'
                subprocess.run([
                    'ffmpeg', '-y', '-i', filename,
                    '-vf', 'scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:(ow-iw)/2:(oh-ih)/2:color=black',
                    '-c:v', 'libx264', '-preset', 'fast', '-crf', '23',
                    '-c:a', 'aac', '-b:a', '128k',
                    '-movflags', '+faststart',
                    new_filename
                ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                if os.path.exists(new_filename) and os.path.getsize(new_filename) > 0:
                    media_files.append(new_filename)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Instagram: {e}")
    return media_files, post_text   

def download_pinterest_video(url, output_path):
    ydl_opts = {
        'outtmpl': output_path,
        'quiet': True,
        'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
        'merge_output_format': 'mp4',
        'noplaylist': True,
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            new_filename = os.path.splitext(filename)[0] + '.mp4'
            subprocess.run([
                'ffmpeg', '-y', '-i', filename,
                '-vf', 'scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:(ow-iw)/2:(oh-ih)/2:color=black',
                '-c:v', 'libx264', '-preset', 'fast', '-crf', '23',
                '-c:a', 'aac', '-b:a', '128k',
                '-movflags', '+faststart',
                new_filename
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            return new_filename if os.path.exists(new_filename) else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Pinterest –≤–∏–¥–µ–æ: {e}")
        return None
    
@bot.message_handler(commands=['start'])
@subscription_guard
def send_welcome(message):
    chat_id = message.chat.id
    user_links.pop(chat_id, None)
    user_posts.pop(chat_id, None)
    user_state[chat_id] = 'WAITING_FOR_LINK'

    # ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º (720x1280)
    video_path = 'welcome_ready.mp4'  # –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    if os.path.exists(video_path):
        try:
            with open(video_path, 'rb') as video:
                bot.send_video(chat_id, video, supports_streaming=True)
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}')

    bot.send_chat_action(chat_id, 'typing')
    time.sleep(0.5)
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üé•\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏ –ø–æ—Å—Ç—ã –∏–∑ Instagram, TikTok, Pinterest.\n\n"
        "‚ö° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ (9:16, 720x1280)."
    )
    bot.send_message(chat_id, welcome_text)


@bot.message_handler(commands=['menu'])
@subscription_guard
def show_menu(message):
    chat_id = message.chat.id
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ï—â—ë –±–æ–ª—å—à–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç—É—Ç", url=ROCKET_URL))
    if chat_id == OWNER_ID:
        markup.add(InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "admin_stats")
def show_admin_stats(call):
    if call.message.chat.id != OWNER_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    stats = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_state)}\n"
        f"üì• –°—Å—ã–ª–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(user_links)}\n"
        f"üìù –ü–æ—Å—Ç–æ–≤: {len(user_posts)}\n"
        f"üóÇÔ∏è –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(user_message_count.values()) if 'user_message_count' in globals() else 'N/A'}"
    )
    bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n{stats}")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def handle_check_subscription(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    if user_id == OWNER_ID or check_subscription(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ—Å—Ç.")
        user_state[chat_id] = 'WAITING_FOR_LINK'
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        bot.send_message(
            chat_id,
            "‚ùó –Ø –Ω–µ –≤–∏–∂—É –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @staritsin_school –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=build_subscribe_keyboard()
        )

@bot.message_handler(commands=['donate'])
@subscription_guard
def handle_donate(message):
    chat_id = message.chat.id

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    markup_main = InlineKeyboardMarkup(row_width=1)
    markup_main.add(
        InlineKeyboardButton("T-Pay / –°–ë–ü / –†–§ –∫–∞—Ä—Ç–∞", url="https://pay.cloudtips.ru/p/2a436b20"),
        InlineKeyboardButton("Telegram Stars / –õ—é–±–∞—è –∫–∞—Ä—Ç–∞", url="https://t.me/your_stars_link"),
        InlineKeyboardButton("Crypto", url="https://t.me/your_crypto_link")
    )
    bot.send_message(
        chat_id,
        "–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –∏ –≤—ã —Ü–µ–Ω–∏—Ç–µ, —á—Ç–æ –º—ã –¥–ª—è –≤–∞—Å —Å—Ç–∞—Ä–∞–µ–º—Å—è ‚Äî –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –≤ –≤–∏–¥–µ –¥–æ–Ω–∞—Ç–∞ üíô",
        reply_markup=markup_main
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã
    markup_sum = InlineKeyboardMarkup(row_width=3)
    markup_sum.add(
        InlineKeyboardButton("‚≠ê 10", callback_data="donate_10"),
        InlineKeyboardButton("‚≠ê 50", callback_data="donate_50"),
        InlineKeyboardButton("‚≠ê 100", callback_data="donate_100"),
        InlineKeyboardButton("‚≠ê 200", callback_data="donate_200"),
        InlineKeyboardButton("‚≠ê 500", callback_data="donate_500"),
        InlineKeyboardButton("‚≠ê 1000", callback_data="donate_1000"),
        InlineKeyboardButton("‚≠ê 10000", callback_data="donate_10000")
    )
    bot.send_message(
        chat_id,
        "–ö–∞–∫–∞—è —Å—É–º–º–∞ –∑–∞—Å—Ç–∞–≤–∏—Ç –Ω–∞—Å —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –æ—Ç —Å—á–∞—Å—Ç—å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=markup_sum
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –±—ã—Å—Ç—Ä—ã–º –¥–æ–Ω–∞—Ç–æ–º
    markup_pay = InlineKeyboardMarkup()
    markup_pay.add(InlineKeyboardButton("–ó–∞–ø–ª–∞—Ç–∏—Ç—å ‚≠ê 50", url="https://pay.cloudtips.ru/p/2a436b20?amount=50"))
    bot.send_message(
        chat_id,
        "üç© –í –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏!!! –ü—Ä–æ—Å—Ç–æ –≤–æ–∑—å–º–∏ –º–æ–∏ –¥–µ–Ω—å–≥–∏!!!",
        reply_markup=markup_pay
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Å—É–º–º—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É)
@bot.callback_query_handler(func=lambda call: call.data.startswith("donate_"))
def handle_donate_amount(call):
    amount = call.data.split("_")[1]
    pay_url = f"https://pay.cloudtips.ru/p/2a436b20?amount={amount}"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(f"–ó–∞–ø–ª–∞—Ç–∏—Ç—å ‚≠ê {amount}", url=pay_url))
    bot.send_message(
        call.message.chat.id,
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –î–ª—è –æ–ø–ª–∞—Ç—ã {amount} —Ä—É–±–ª–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['rocket'])
@subscription_guard
def handle_rocket(message):
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(0.5)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ï—â—ë –±–æ–ª—å—à–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", url=ROCKET_URL))
    bot.send_message(
        message.chat.id,
        "üöÄ –î–ª—è –µ—â—ë –±–æ–ª—å—à–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ @rocketcontentbot",
        reply_markup=markup
    )
    increment_message_count(message.chat.id)

@bot.message_handler(commands=['rewrite'])
@subscription_guard
def handle_rewrite_command(message):
    chat_id = message.chat.id
    post_text = user_posts.get(chat_id)
    if not post_text or not post_text.strip():
        bot.send_message(chat_id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.")
        return
    bot.send_chat_action(chat_id, 'typing')
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–º—ã—Å–ª, –Ω–æ —Å–¥–µ–ª–∞–π –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–º, —Ü–µ–ø–ª—è—é—â–∏–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": post_text}
            ],
            max_tokens=256,
            temperature=1.0,
        )
        rewritten = response.choices[0].message.content.strip()
        bot.send_message(chat_id, f"‚úçÔ∏è –í–æ—Ç —Ä–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–∞:\n\n{rewritten}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ä–∞–π—Ç")

@bot.message_handler(func=lambda message: True, content_types=['text'])
@subscription_guard
def handle_link(message):
    url = message.text.strip()
    chat_id = message.chat.id

    if user_state.get(chat_id) == 'WAITING_FOR_DOWNLOAD':
        bot.send_message(chat_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å, —è –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ...")
        return

    platform = detect_platform(url)
    if not platform:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
        return

    user_links.pop(chat_id, None)
    user_posts.pop(chat_id, None)
    user_links[chat_id] = url
    user_state[chat_id] = 'WAITING_FOR_DOWNLOAD'

    threading.Thread(target=process_download, args=(chat_id, url)).start()

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
